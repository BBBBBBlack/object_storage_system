server:
  port: 8083
  tomcat:
    connection-timeout: 200000
spring:
  application:
    name: node01-service
  cloud:
    nacos:
      discovery:
        metadata:
          slot: 0
      server-addr: localhost:8848
  datasource:
    url: jdbc:mysql://localhost:3306/object_storage_system?useSSL=false
    username: root
    password: Aa@123456
    driver-class-name: com.mysql.cj.jdbc.Driver
  redis:
    host: 127.0.0.1
    port: 6379
    database: 0
    timeout: 5000ms
    lettuce:
      pool:
        max-active: 50
        max-wait: -1ms
        max-idle: 10
        min-idle: 5
  servlet:
    multipart:
      enabled: true
      max-file-size: 500MB
      max-request-size: 500MB
feign:
  httpclient:
    enabled: true
    max-connections: 200
    max-connections-per-route: 50
mybatis:
  mapper-locations: "classpath:mapper/*.xml"
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
logging:
  level:
    web: debug
  pattern:
    dateformat: MM-dd HH:mm:ss:SSS

base-url:
  windows: D:\DataBase\object_storage_system\1\
#  windows: \object_storage_system\db\3\

tcp:
  tcp-port: 9083
  auto-copy:
    enable: true
    copy-ip: 127.0.0.1
    copy-port: 9086

seata:
  registry: # TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址
  # 参考tc服务自己的registry.conf中的配置，
  # 包括：地址、namespace、group、application-name 、cluster
    type: nacos
    nacos: # tc
      server-addr: 127.0.0.1:8848
      namespace: ""
      group: DEFAULT_GROUP
      application: seata-server # tc服务在nacos中的服务名称
      username: "nacos"
      password: "nacos"
  tx-service-group: seata-demo # 事务组，根据这个获取tc服务的cluster名称
  service:
    vgroup-mapping: # 事务组与TC服务cluster的映射关系
      seata-demo: HZ